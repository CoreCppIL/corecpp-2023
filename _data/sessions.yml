#-
#  id: 012
#  title: "Linux Security and Isolation APIs essentials"
#  description: >
#    <p><b>WORKSHOP</b></p>
#    <p>This course provides an overview of the low-level Linux features–set-UID programs, capabilities, namespaces, and control groups (v2)–that are used
#    to implement privileged applications and build container, virtualization, and sandboxing technologies. (The course does not cover systems such as
#    Docker and LXC, but participants will gain an an insight into the implementation and operation of such systems.)</p>
#    <p>The primary audience comprises designers and programmers building privileged applications, container applications, and sandboxing applications.
#    Systems administrators who manage such applications will also find the course of benefit. Participants should have some awareness of classical
#    Linux/UNIX concepts such as file descriptors and file I/O, signals, and the process lifecycle (fork(), exec(), wait(), exit()). In addition,
#    participants should have a reading knowledge of the C programming language. (Note, however, that the course exercises do not require writing any programs.)</p>
#    <p>Limited seats, <a href="https://ti.to/hamakor/core-cpp-2022/with/6t7udu7msda">register now</a>!</p>
#  subtype: workshop
#  speakers: [21]
#  language: en
-
  id: 002
  title: "Closing session"
  description: "TBD"
-
  id: 005
  title: "A lot of great C++ content!"
  description: "A lot of great C++ content! Sumbit yours at <a href='https://cfs.corecpp.org/'>https://cfs.corecpp.org/<a>"
-
  id: 006
  title: "More activities"
  description: "In construction"
  service: true
-
  id: 007
  title: "Meetup & Lightning Talks"
  description: "Stay tuned!"
  service: true
-
  id: 008
  title: "Great C++ content!"
  description: "To be published soon"
  service: true
-
  id: 099
  title: "Welcome to Core C++ 2023!"
  #place: "Weston::Auditorium"
  subtype: keynote
  service: true
-
  id: 1000
  title: ""
  service: true
-
  id: 101
  title: "Break"
  service: true
-
  id: 102
  title: "Lunch"
#  place: "Economics::Lobby"
  service: true
-
  id: 104
  title: "Updates"
  #place: "Weston::Auditorium"
  service: true
-
  id: 105
  title: "Closing Remarks"
  #place: "Weston::Auditorium"
  service: true
-
  id: 106
  title: "Registration and Coffee"
#  place: "Economics::Lobby"
  service: true
-
  id: 107
  title: "Coffee Break"
#  place: "Economics::Lobby"
  service: true
#  speakers: [30, 31]
-
  id: 1001
  title: "Day Trip"
  description: >
    <p>We're excited to invite you to participate in our planned trip for CoreC++ abroad guests!</p>
    <p>The tour will be to the Dead Sea area and Jerusalem.</p>
    <p>The fee includes a private tour guide, travel, and lunch.</p>
    <p>The tour is planned to leave from the Margoza hotel in Tel Aviv in the morning of September 4th, ~8:00 AM. The return time planned is ~18:00.</p>
    <p>The tour is open for your travel companions.</p>
  service: true
-
  id: 10
  title: "Keynote"
  subtype: keynote
  speakers: [10]
-
  id: 15
  title: "Keynote"
  subtype: keynote
  speakers: [15]
-
  id: 11
  title: "Designing and Implementing Safe C++ Applications"
  description: >
    <p>This workshop aims to address the design and implementation principles and tactics necessary for creating secure C++
    applications. While memory issues will be given proper attention, it's important to note that application safety extends
    beyond this. To ensure application safety, it is crucial to capture requirements correctly, make appropriate design choices,
    implement code securely, and conduct testing, static code analysis, and dynamic sanitizing. Through relevant
    examples and class practice, we will cover the entire life cycle of creating secure applications, and provide a
    checklist for achieving enhanced safety and improved code quality.</p>
  speakers: [11]
-
  id: 12
  title: "Concurrency in Modern C++"
  description: >
    <p>This class gives you a detailed insight into the multithreading facilities of C++. Starting with the foundation
    in C++11, continuing with the parallel STL in C++17, and closing with the concurrency features in C++20.</p>
  speakers: [12]
-
  id: 13
  title: "Exploring Rust to Enhance Your C++ Skills"
  description: >
    <p>This class is designed to help C++ developers explore Rust, an increasingly popular and powerful language. Through
    hands-on examples and projects, students will learn why Rust has become so widely adopted and why it is such an attractive
    choice for C++ developers. Learning Rust will not only enable attendees to take a peek at this new language, but
    will also greatly enhance the quality of their C++ code.</p>
    <p>In the first part of the class, students will learn about Rust's history, governance model, and community. We will
    also discuss the main technical selling points of Rust and its current level of maturity. Following this, we will go through a
    "Hello World" example in Rust so that students can become familiar with Rust's syntax and understand some of the fundamental features.</p>
    <p>To further solidify their understanding of these concepts, students will then work on a "guess the number" game project.
    We will look at how to improve the game by using pattern matching and extracting functionality to separate functions.</p>
    <p>In addition to the fundamentals, the class will cover the use of external libraries. We will discuss what a "crate" is
    and how to find and add one via cargo. We will also look at intermediate features like structs and enums, dynamic allocation,
    traits and polymorphism, strings and manipulation, and common standard library containers and utilities.</p>
    <p>Two additional projects will also be included. Students will re-create the Wordle game in Rust and add a CLI to the "guess
    the number" game, using the 'clap' 3rd party crate. Finally, we will showcase other compelling Rust features such as lifetimes,
    async, compile-time thread safety, compile-time evaluation, hygienic macros, and interoperability with C++.</p>
    <p>By the end of the class, attendees will have acquired the knowledge and skillset necessary to start their journey with Rust,
    and they will be able to apply the learned notions to their C++ development mindset.</p>
  speakers: [13]
-
  id: 14
  title: "Linux System Programming Essentials"
  description: >
    <p>This workshop provides an introduction to the low-level interfaces that are used to build system-level applications on
    Linux (and UNIX) systems. Topics covered include file I/O using system calls, signals, processes, and process lifecycle
    (<code>fork()</code>, <code>execve()</code>, <code>wait()</code>, <code>exit()</code>).</p>
    <p>There will be practical programming sessions as part of the workshop.</p>
  speakers: [14]
#-
#  id: 20
#  title: "C++"
#  description: >
#    <p></p>
#  speakers: [20]
-
  id: 21
  title: "Better Code: Exploring Validity"
  description: >
    <p>Most developers have at least some notion of the meaning of object, state, invariant, value, and invalid. On the other hand,
    it can be surprisingly difficult to precisely define these words in a way that matches both intuition and common usage. This difficulty
    has even led to library divergence within the C++ standard library!</p>
    <p>This talk is a journey of discovery where we not only find satisfactory definitions, but we identify practical, good coding practices
    along the way. At the end of this talk you'll be able to identify implicit contracts, understand the deep connection between move semantics
    and exception safety, and, in general, have a greater appreciation for the meaning of the programs we write every day.</p>
  speakers: [21]
-
  id: 22
  title: "Lightning Updates"
  description: >
    <p>This talks describes an update system designed for scale of 100s M of users. It presents generic solution to update any data-structure in a simple way using modern C++ facilities in standard library only. It shows arguments for strong types and readable code using verbs and nouns. Even if you are not going to need such functionality, this talk can serve as an inspiration how to write clean code.</p>
  speakers: [22]
-
  id: 1011
  title: "C++ Incidental Explorations"
  description: >
    <p>Let's embark on a journey through the exciting discussions about C++, found in StackOverflow's Q&A. We will cover both fundamental issues as well as anecdotal corners of the language, get lost down a few rabbit holes, and become familiar with some topics usually reserved for "language lawyers". We will finish by exploring whether, and how ChatGPT might help with writing C++ in the future.</p>
  speakers: [11]
-
  id: 23
  title: "The Imperatives Must Go!"
  description: >
    <p>Can a language whose official motto is "Avoid Success at All Costs" teach us new tricks in modern C++ ? If Haskell is so great, why hasn't it taken over the world? My claim is that it has. But not as a Roman legion loudly marching in a new territory, rather as distributed Trojan horses popping in at the gates, masquerading as modern features or novel ideas in today’s mainstream languages. Functional Programming ideas that have been around for over 40 years will be rediscovered to solve our current software complexity problems. Indeed, modern C++ has become more functional. From mundane concepts like lambdas & closures, std::function, values types and constants, to composability of STL algorithms, lazy ranges, folding, mapping or even higher-order functions in STL. Did I mention Rust yet? In this session we’ll analyze a bunch of FP techniques in C++ and see how they help make our code shorter, clearer and faster, by embracing a declarative vs. an imperative style.
    We’ll visit the functional parts of current STL, use algebraic data types (ADT) and learn about the new FP stuff coming in the next C++ standard, like ranges or monadic extensions to <code>std::future</code>, <code>std::optional</code> and <code>std::expected</code>. Brace yourselves for a bumpy ride including composition, lifting, currying, partial application, pure functions, maybe even pattern matching and lazy evaluation.</p>
  speakers: [23]
-
  id: 24
  title: "Multi-Paradigm Programming and Beyond"
  description: >
    <p>Most everybody has heard that C++ is a Multi-Paradigm Programming Language, but what does that really mean?</p>
    <p>The defined language paradigms are: Imperative, Procedural, Functional, Declarative, & Object-Oriented, but what does that really mean?</p>
    <p>These are the building blocks in the levels of granularity, almost a base implementation style but when many people say paradigm when they are really thinking of bigger more sophisticated conceptual processing and data models.</p>
    <p>What are some of these alternate paradigms people are thinking of. Join us for an exploration of what paradigms are, what they look like, and how do they are used in software design.</p>
  speakers: [24]
-
  id: 25
  title: "Standard C++ toolset"
  description: >
    <p>Programming languages nowadays are often packed with a standard set of tools that form an ecosystem around it. Compilers and debuggers, static analyzers, build systems, dependency managers, and unit testing frameworks are essential for adoption and evolve with the language.</p>
    <p>C++ is about to turn 40. Though the ecosystem was very diverse and incomplete for many years, it is getting better! In this talk, I will discuss:</p>
    <p><ul>
        <li>The typical “project model - compiler - debugger” triad, and how it still depends on the area of usage (Embedded or Game Development).</li>
        <li>How the build systems and dependency managers are now more standard.</li>
        <li>How Clang affected the standard toolset in all areas, forming not only a baseline for compilers, but also formatters, code analyzers, and IDEs.</li>
        <li>How many code analyzers exist for C++ and why there is still room for improvement.</li>
        <li>How unit testing and code coverage solutions can be used effectively.</li>
        <li>And finally, how the language committee is learning to listen to and help standard toolset contributors.</li>
    </ul></p>
    <p>You’ll get a better understanding of the tools available to help you develop complex solutions in C++ without struggling with toolsets.</p>
  speakers: [25]
-
  id: 26
  title: "Let's talk about C++'s Abstraction Layers"
  description: >
    <p>Abstraction Layers are one of the strongest tools we're using for software development. Even though being taught during the first semester of a Computer Science undergraduate and is widely used throughout the everyday workflow of software development, a lot of logic bugs occur by wrong usage of this concept.</p>
    <p>During this talk, we will define and explore the C++ abstractions layers, through both the mental model as reflected in papers, as well as through past mistakes and bugs. We will introduce some ground rules to encourage more correct usage of this concept, by extrapolating from examples from the latest C++23 and C++26 standards' features. Finally, we will review a proposal for addressing ISO C++ WG21 committee work.</p>
    <p>This is an exploratory talk, audience participation is highly encouraged!</p>
  speakers: [26]
#-
#  id: 00
#  title: "C++"
#  description: >
#    <p></p>
#  speakers: [00]
